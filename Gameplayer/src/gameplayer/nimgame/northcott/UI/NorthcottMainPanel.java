/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gameplayer.nimgame.northcott.UI;

import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import gameplayer.gameengine.eventmanager.EventChannelInvalidException;
import gameplayer.gameengine.eventmanager.EventManager;
import gameplayer.gameengine.eventmanager.EventRegistry;
import gameplayer.providers.GameSettingsProvider;
import gameplayer.gameengine.events.GameEvent;
import gameplayer.gameengine.eventmanager.GameEventListener;
import gameplayer.gameengine.exceptions.GameException;
import gameplayer.nimgame.standard.NimGameCore;
import gameplayer.nimgame.standard.events.NimGameStepEvent;
import gameplayer.nimgame.standard.NimPlayer;
import gameplayer.nimgame.standard.NimStepObject;
import gameplayer.nimgame.standard.events.NimGameTurnEvent;
import gameplayer.nimgame.standard.UI.PlayerEntryPanel;
import gameplayer.providers.GameEntityProvider;

/**
 *
 * @author Máté Pozsgay
 */
public class NorthcottMainPanel extends javax.swing.JPanel implements GameEventListener, GameEntityProvider {

    public static final String NORTHCOTT_CHANNEL_NAME = "NORTHCOTT_UI";
    private int heapCount;
    private NimGameCore nimGame;
    private int maxHeapValue;
    private List<ChessColumn> columns;
    private final NorthcottSettingsPanel settingsPanel = new NorthcottSettingsPanel(this);
    private final NorthcottStatusPanel statusPanel = new NorthcottStatusPanel();

    /**
     * Creates new form NorthcottMainPanel
     */
    public NorthcottMainPanel(NimGameCore nimGame) throws EventChannelInvalidException {
        initComponents();
        this.nimGame = nimGame;
        EventManager.getEventChannel(EventRegistry.EVENT_UI_SETTINGS).subscribeForChannel(this);
        EventManager.getEventChannel(EventRegistry.EVENT_GAMEENGINE).subscribeForChannel(this);
        fieldDimensionChanged(8, 8);
    }

    private void createField() {
        fieldPanelPluginPlaceholder.removeAll();
        columns = new ArrayList(this.heapCount);
        fieldPanelPluginPlaceholder.add(new ChessSideColumn(maxHeapValue));
        for (int i = 0; i < this.heapCount; i++) {
            columns.add(new ChessColumn(this, i, this.maxHeapValue));
            fieldPanelPluginPlaceholder.add(columns.get(i));
        }
        fieldPanelPluginPlaceholder.add(new ChessSideColumn(maxHeapValue));
        fieldPanelPluginPlaceholder.revalidate();
        fieldPanelPluginPlaceholder.repaint();
        setAllFieldsHidden(true);
        revealTopPlayer.setSelected(false);
        revealBottomPlayer.setSelected(false);
    }

    public void fieldDimensionChanged(int heapCount, int maxHeapValue) {
        this.heapCount = heapCount;
        this.maxHeapValue = maxHeapValue;
        createField();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        initControlls = new javax.swing.JPanel();
        revealTopPlayer = new javax.swing.JToggleButton();
        revealBottomPlayer = new javax.swing.JToggleButton();
        fieldPanelPluginPlaceholder = new javax.swing.JPanel();

        revealTopPlayer.setText("Reveal Top Player");
        revealTopPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revealTopPlayerActionPerformed(evt);
            }
        });

        revealBottomPlayer.setText("Reveal Bottom Player");
        revealBottomPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revealBottomPlayerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout initControllsLayout = new javax.swing.GroupLayout(initControlls);
        initControlls.setLayout(initControllsLayout);
        initControllsLayout.setHorizontalGroup(
            initControllsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(initControllsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(revealTopPlayer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(revealBottomPlayer)
                .addContainerGap(483, Short.MAX_VALUE))
        );
        initControllsLayout.setVerticalGroup(
            initControllsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, initControllsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(initControllsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(revealTopPlayer)
                    .addComponent(revealBottomPlayer))
                .addGap(17, 17, 17))
        );

        fieldPanelPluginPlaceholder.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        fieldPanelPluginPlaceholder.setLayout(new javax.swing.BoxLayout(fieldPanelPluginPlaceholder, javax.swing.BoxLayout.X_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(initControlls, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fieldPanelPluginPlaceholder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fieldPanelPluginPlaceholder, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(initControlls, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void revealTopPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revealTopPlayerActionPerformed
        this.setTopPlayerHidden(!revealTopPlayer.isSelected());
        revealBottomPlayer.setEnabled(!revealTopPlayer.isSelected());
    }//GEN-LAST:event_revealTopPlayerActionPerformed

    private void revealBottomPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revealBottomPlayerActionPerformed
        this.setBottomPlayerHidden(!revealBottomPlayer.isSelected());
        revealTopPlayer.setEnabled(!revealBottomPlayer.isSelected());
    }//GEN-LAST:event_revealBottomPlayerActionPerformed

    @Override
    public void eventReceived(String channelName, GameEvent event) {
        if (event.getOrigin() instanceof PlayerEntryPanel) {
            PlayerEntryPanel playerPanel = (PlayerEntryPanel) event.getOrigin();
            if (playerPanel.getPlayerID() == 0) {
                revealTopPlayer.setVisible(!playerPanel.isAI());
            } else {
                revealBottomPlayer.setVisible(!playerPanel.isAI());
            }
            setAllFieldsHidden(true);
            revealBottomPlayer.setSelected(false);
            revealBottomPlayer.setEnabled(true);
            revealTopPlayer.setSelected(false);
            revealTopPlayer.setEnabled(true);
        }
        switch (event.getEventType()) {
            case GameEvent.EVENT_GAME_STARTED: {
                startGame();
                initControlls.setVisible(false);
                break;
            }
            case GameEvent.EVENT_GAME_ENDED: {
                JOptionPane.showMessageDialog(this, "The game is normally ended. Winner is: " + nimGame.getWiningPlayer());
                break;
            }
        }
        if (event instanceof NimGameStepEvent) {
            NimGameStepEvent nimStepEvent = (NimGameStepEvent) event;
            columns.get(nimStepEvent.getStepObject().getHeapID()).updateHeap(nimStepEvent.getStepObject().getOriginatingPlayer().getPlayerID(), nimStepEvent.getStepObject().getAmount());
        }
        if (event instanceof NimGameTurnEvent) {
            NimGameTurnEvent nimTurnEvent = (NimGameTurnEvent) event;
            updatePanels();
        }
    }

    @Override
    public GameSettingsProvider getSettingsProvider() {
        return this.settingsPanel;
    }

    @Override
    public Component getStatusUIComponent() {
        return this.statusPanel;
    }

    @Override
    public Component getMainUIComponent() {
        return this;
    }

    @Override
    public Component getSettingsUIComponent() {
        return this.settingsPanel;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel fieldPanelPluginPlaceholder;
    private javax.swing.JPanel initControlls;
    private javax.swing.JToggleButton revealBottomPlayer;
    private javax.swing.JToggleButton revealTopPlayer;
    // End of variables declaration//GEN-END:variables

    public void columnChanged(int value) {
        fieldDimensionChanged(value, this.maxHeapValue);
    }

    public void rowChanged(int value) {
        fieldDimensionChanged(this.heapCount, value);
    }

    public void setTopPlayerHidden(boolean isHidden) {
        columns.forEach((column) -> {
            column.setTopPlayerHidden(isHidden);
        });
    }

    public void setBottomPlayerHidden(boolean isHidden) {
        columns.forEach((column) -> {
            column.setBottomPlayerHidden(isHidden);
        });
    }

    public void setBothPlayerHidden(boolean isHidden) {
        setTopPlayerHidden(isHidden);
        setBottomPlayerHidden(isHidden);
    }

    public void setAllFieldsHidden(boolean isHidden) {
        columns.forEach((column) -> {
            column.setAllFieldsHidden(isHidden);
        });
    }

    List<Integer> getHeapConfiguration() {
        List<Integer> heapConfiguration = new ArrayList<>();
        for (ChessColumn column : columns) {
            heapConfiguration.add(column.getHeapValue());
        }
        return heapConfiguration;
    }

    private void updatePanels() {
        statusPanel.setCurrentPlayer(nimGame.getCurrentPlayer().getName());
    }

    private void startGame() {
        for (ChessColumn column : columns) {
            column.startGame();
        }
        updatePanels();
    }

    public int getCurrentPlayerID() {
        return nimGame.getCurrentPlayer().getPlayerID();
    }

    public void heapConfigurationChanged(int heapID, int amount) {
        try {
            nimGame.nextStep(new NimStepObject(heapID, amount, (NimPlayer) nimGame.getCurrentPlayer()));
        } catch (GameException ex) {
            JOptionPane.showMessageDialog(this, "Invalid step: " + ex.getMessage());
        }
    }
}
