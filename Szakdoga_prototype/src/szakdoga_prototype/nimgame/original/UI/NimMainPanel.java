/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package szakdoga_prototype.nimgame.original.UI;

import java.awt.Component;
import javax.swing.JOptionPane;
import szakdoga_prototype.GameStatusDisplayer;
import szakdoga_prototype.gameengine.events.GameEvent;
import szakdoga_prototype.gameengine.events.GameEventListener;
import szakdoga_prototype.gameengine.exceptions.GameException;
import szakdoga_prototype.nimgame.core.NimGameCore;
import szakdoga_prototype.nimgame.core.NimGameEvent;
import szakdoga_prototype.nimgame.core.NimPlayer;
import szakdoga_prototype.nimgame.core.NimStepObject;

/**
 *
 * @author matthew
 */
public class NimMainPanel extends javax.swing.JPanel implements GameEventListener {

    private final NimGameCore nimGame;
    private final GameStatusDisplayer statusDisplayer;

    /**
     * Creates new form mainPanel
     *
     * @param nimGame
     */
    public NimMainPanel(final NimGameCore nimGame, final GameStatusDisplayer statusDisplayer) {
        this.nimGame = nimGame;
        this.statusDisplayer = statusDisplayer;
        this.nimGame.getEventHandler().subscribeForEvent(this);
        initComponents();
    }

    public void startGame() {
        for (int i = 0; i < nimGame.getHeapCount(); i++) {
            this.add(new HeapPanel(this, i, nimGame.getHeapValue(i)));
        }
        statusDisplayer.setCurrentPlayer(nimGame.getCurrentPlayer());
        this.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void updatePanels() {
        for (Component component : this.getComponents()) {
            if (component instanceof HeapPanel) {
                HeapPanel panel = (HeapPanel) component;
                panel.setPanelValue(nimGame.getHeapValue(panel.getPanelID()));
            }
        }
    }

    void heapChanged(int panelID, int value) {
        try {
            nimGame.nextStep(new NimStepObject(panelID, value, (NimPlayer) nimGame.getCurrentPlayer()));
        } catch (GameException ex) {
            JOptionPane.showMessageDialog(this, "The requested opration cannot be processed: " + ex.getMessage());
        }
    }

    @Override
    public void eventReceived(GameEvent event) {
        switch (event.getEventType()) {
            case GameEvent.EVENT_GAME_STARTED: {
                startGame();
                break;
            }
            case GameEvent.EVENT_GAME_STOPED:{
                this.removeAll();
                JOptionPane.showMessageDialog(this, "Game aborted.");
                break;
                
            }
            case GameEvent.EVENT_GAME_ENDED: {
                this.removeAll();
                JOptionPane.showMessageDialog(this, "The game is normally ended by a winning player: " + nimGame.getWiningPlayer());
                break;
            }
            case NimGameEvent.EVENT_NEXT_TURN: {
                updatePanels();
                this.statusDisplayer.setCurrentPlayer(nimGame.getCurrentPlayer());
                this.statusDisplayer.setStepHistory(nimGame.getStepHistory());
                break;
            }
            default: {
                JOptionPane.showMessageDialog(this, "Error: Unhandled event. Type: " + event.getEventType());
            }

        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
